//==========================================================================================================================
//Key is used to ensure the consistency of file version and content, and cannot be modified.
//Version Control is the version number written when the file is generated and cannot be modified.
//ToolMessage is used to record related information of any tool that has processed the file and cannot be manually modified.
//UserMessage is used by the user to write any information, which can be modified in any way.
//Content is the actual payload of the file.
//Parameter is the additional parameter information carried by the file and cannot be modified in any way.

//Key is generated by the hash of Version Control, Content and Parameter to ensure the consistency of the file.
//These three parts do not allow any individual modification
//==========================================================================================================================


//[UHDL]Key Start [md5:7cd809693f7094868124082b52d442e9]
//Version Control Hash: 3accddf64b1dd03abeb9b0b3e5a7ba44
//Content Hash: 0cf1c2598da3997cf77b5cdcad297bd5
//Parameter Hash: d41d8cd98f00b204e9800998ecf8427e
//[UHDL]Key End [md5:7cd809693f7094868124082b52d442e9]

//[UHDL]Version Control Start [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]
//[UHDL]Version Control Version:1.0.1
//[UHDL]Version Control End [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]

//[UHDL]Tool Message Start [md5:be10110a876d32a488916f6dd7a39742]
//Written by UHDL in 2023-07-17 00:33:45
//[UHDL]Tool Message End [md5:be10110a876d32a488916f6dd7a39742]

//[UHDL]User Message Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]User Message End [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Content Start [md5:0cf1c2598da3997cf77b5cdcad297bd5]
module RegSpaceBase_cfg_reg_bank_E (
	input             clk                ,
	input             rst_n              ,
	input      [31:0] rreq_addr          ,
	input             rreq_vld           ,
	output            rreq_rdy           ,
	output reg [31:0] rack_data          ,
	output reg        rack_vld           ,
	input             rack_rdy           ,
	input             reg0_sw_field1_rdat,
	output            reg0_sw_field1_rvld,
	input             reg0_sw_field1_rrdy,
	input      [1:0]  reg0_sw_field2_rdat,
	output            reg0_sw_field2_rvld,
	input             reg0_sw_field2_rrdy,
	input      [2:0]  reg0_sw_field3_rdat,
	output            reg0_sw_field3_rvld,
	input             reg0_sw_field3_rrdy,
	input      [3:0]  reg0_sw_field4_rdat,
	output            reg0_sw_field4_rvld,
	input             reg0_sw_field4_rrdy,
	input             reg1_sw_field1_rdat,
	output            reg1_sw_field1_rvld,
	input             reg1_sw_field1_rrdy,
	input      [1:0]  reg1_sw_field2_rdat,
	output            reg1_sw_field2_rvld,
	input             reg1_sw_field2_rrdy,
	input      [2:0]  reg1_sw_field3_rdat,
	output            reg1_sw_field3_rvld,
	input             reg1_sw_field3_rrdy,
	input      [3:0]  reg1_sw_field4_rdat,
	output            reg1_sw_field4_rvld,
	input             reg1_sw_field4_rrdy);

	//Wire define for this module.
	wire [31:0] reg0_rdat;
	wire [0:0]  reg0_rrdy;
	wire [0:0]  reg0_rvld;
	wire [31:0] reg1_rdat;
	wire [0:0]  reg1_rrdy;
	wire [0:0]  reg1_rvld;

	//Wire define for sub module.

	//Wire define for Inout.

	//Wire sub module connect to this module and inter module connect.
	assign rreq_rdy = (rack_rdy && rack_vld);
	
	always @(*) begin
	    if((rreq_addr == 32'b0)) rack_data = reg0_rdat;
	    else if((rreq_addr == 32'b100000)) rack_data = reg1_rdat;
	    else rack_data = 32'b0;
	end
	
	always @(*) begin
	    if((rreq_vld && (rreq_addr == 32'b0))) rack_vld = reg0_rrdy;
	    else if((rreq_vld && (rreq_addr == 32'b100000))) rack_vld = reg1_rrdy;
	    else rack_vld = 1'b0;
	end
	
	assign reg0_rdat = {2'b0, reg0_sw_field1_rdat, reg0_sw_field2_rdat, reg0_sw_field3_rdat, 1'b0, reg0_sw_field4_rdat, 19'b0};
	
	assign reg0_rrdy = 1'b1;
	
	assign reg0_rvld = ((rack_rdy && rack_vld) && (rreq_addr == 32'b0));
	
	assign reg0_sw_field1_rvld = reg0_rvld;
	
	assign reg0_sw_field2_rvld = reg0_rvld;
	
	assign reg0_sw_field3_rvld = reg0_rvld;
	
	assign reg0_sw_field4_rvld = reg0_rvld;
	
	assign reg1_rdat = {2'b0, reg1_sw_field1_rdat, reg1_sw_field2_rdat, reg1_sw_field3_rdat, 1'b0, reg1_sw_field4_rdat, 19'b0};
	
	assign reg1_rrdy = 1'b1;
	
	assign reg1_rvld = ((rack_rdy && rack_vld) && (rreq_addr == 32'b100000));
	
	assign reg1_sw_field1_rvld = reg1_rvld;
	
	assign reg1_sw_field2_rvld = reg1_rvld;
	
	assign reg1_sw_field3_rvld = reg1_rvld;
	
	assign reg1_sw_field4_rvld = reg1_rvld;
	

	//Wire this module connect to sub module.

	//module inst.

endmodule
//[UHDL]Content End [md5:0cf1c2598da3997cf77b5cdcad297bd5]

//[UHDL]Parameter Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Parameter End [md5:d41d8cd98f00b204e9800998ecf8427e]

