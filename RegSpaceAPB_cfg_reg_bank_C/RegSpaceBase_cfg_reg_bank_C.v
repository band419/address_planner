//==========================================================================================================================
//Key is used to ensure the consistency of file version and content, and cannot be modified.
//Version Control is the version number written when the file is generated and cannot be modified.
//ToolMessage is used to record related information of any tool that has processed the file and cannot be manually modified.
//UserMessage is used by the user to write any information, which can be modified in any way.
//Content is the actual payload of the file.
//Parameter is the additional parameter information carried by the file and cannot be modified in any way.

//Key is generated by the hash of Version Control, Content and Parameter to ensure the consistency of the file.
//These three parts do not allow any individual modification
//==========================================================================================================================


//[UHDL]Key Start [md5:bb047d6c32c54ca23dbc5797cd23d576]
//Version Control Hash: 3accddf64b1dd03abeb9b0b3e5a7ba44
//Content Hash: 6d0ff7ade717e50834a8a4c1e1e3bead
//Parameter Hash: d41d8cd98f00b204e9800998ecf8427e
//[UHDL]Key End [md5:bb047d6c32c54ca23dbc5797cd23d576]

//[UHDL]Version Control Start [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]
//[UHDL]Version Control Version:1.0.1
//[UHDL]Version Control End [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]

//[UHDL]Tool Message Start [md5:be10110a876d32a488916f6dd7a39742]
//Written by UHDL in 2023-07-17 00:33:45
//[UHDL]Tool Message End [md5:be10110a876d32a488916f6dd7a39742]

//[UHDL]User Message Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]User Message End [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Content Start [md5:6d0ff7ade717e50834a8a4c1e1e3bead]
module RegSpaceBase_cfg_reg_bank_C (
	input             clk                ,
	input             rst_n              ,
	input      [31:0] wreq_addr          ,
	input      [31:0] wreq_data          ,
	input             wreq_vld           ,
	output reg        wreq_rdy           ,
	output            reg0_sw_field1_wdat,
	output            reg0_sw_field1_wvld,
	input             reg0_sw_field1_wrdy,
	output     [1:0]  reg0_sw_field2_wdat,
	output            reg0_sw_field2_wvld,
	input             reg0_sw_field2_wrdy,
	output     [2:0]  reg0_sw_field3_wdat,
	output            reg0_sw_field3_wvld,
	input             reg0_sw_field3_wrdy,
	output     [3:0]  reg0_sw_field4_wdat,
	output            reg0_sw_field4_wvld,
	input             reg0_sw_field4_wrdy,
	output            reg1_sw_field1_wdat,
	output            reg1_sw_field1_wvld,
	input             reg1_sw_field1_wrdy,
	output     [1:0]  reg1_sw_field2_wdat,
	output            reg1_sw_field2_wvld,
	input             reg1_sw_field2_wrdy,
	output     [2:0]  reg1_sw_field3_wdat,
	output            reg1_sw_field3_wvld,
	input             reg1_sw_field3_wrdy,
	output     [3:0]  reg1_sw_field4_wdat,
	output            reg1_sw_field4_wvld,
	input             reg1_sw_field4_wrdy);

	//Wire define for this module.
	wire [31:0] reg0_wdat;
	wire [0:0]  reg0_wrdy;
	wire [0:0]  reg0_wvld;
	wire [31:0] reg1_wdat;
	wire [0:0]  reg1_wrdy;
	wire [0:0]  reg1_wvld;

	//Wire define for sub module.

	//Wire define for Inout.

	//Wire sub module connect to this module and inter module connect.
	always @(*) begin
	    if((wreq_addr == 32'b0)) wreq_rdy = reg0_wrdy;
	    else if((wreq_addr == 32'b100000)) wreq_rdy = reg1_wrdy;
	    else wreq_rdy = 1'b0;
	end
	
	assign reg0_wdat = wreq_data;
	
	assign reg0_wrdy = 1'b1;
	
	assign reg0_wvld = (wreq_vld && (wreq_addr == 32'b0));
	
	assign reg0_sw_field1_wdat = reg0_wdat[0:0];
	
	assign reg0_sw_field1_wvld = reg0_wvld;
	
	assign reg0_sw_field2_wdat = reg0_wdat[3:2];
	
	assign reg0_sw_field2_wvld = reg0_wvld;
	
	assign reg0_sw_field3_wdat = reg0_wdat[6:4];
	
	assign reg0_sw_field3_wvld = reg0_wvld;
	
	assign reg0_sw_field4_wdat = reg0_wdat[11:8];
	
	assign reg0_sw_field4_wvld = reg0_wvld;
	
	assign reg1_wdat = wreq_data;
	
	assign reg1_wrdy = 1'b1;
	
	assign reg1_wvld = (wreq_vld && (wreq_addr == 32'b100000));
	
	assign reg1_sw_field1_wdat = reg1_wdat[0:0];
	
	assign reg1_sw_field1_wvld = reg1_wvld;
	
	assign reg1_sw_field2_wdat = reg1_wdat[3:2];
	
	assign reg1_sw_field2_wvld = reg1_wvld;
	
	assign reg1_sw_field3_wdat = reg1_wdat[6:4];
	
	assign reg1_sw_field3_wvld = reg1_wvld;
	
	assign reg1_sw_field4_wdat = reg1_wdat[11:8];
	
	assign reg1_sw_field4_wvld = reg1_wvld;
	

	//Wire this module connect to sub module.

	//module inst.

endmodule
//[UHDL]Content End [md5:6d0ff7ade717e50834a8a4c1e1e3bead]

//[UHDL]Parameter Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Parameter End [md5:d41d8cd98f00b204e9800998ecf8427e]

