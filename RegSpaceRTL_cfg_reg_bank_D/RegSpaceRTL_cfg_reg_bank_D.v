//==========================================================================================================================
//Key is used to ensure the consistency of file version and content, and cannot be modified.
//Version Control is the version number written when the file is generated and cannot be modified.
//ToolMessage is used to record related information of any tool that has processed the file and cannot be manually modified.
//UserMessage is used by the user to write any information, which can be modified in any way.
//Content is the actual payload of the file.
//Parameter is the additional parameter information carried by the file and cannot be modified in any way.

//Key is generated by the hash of Version Control, Content and Parameter to ensure the consistency of the file.
//These three parts do not allow any individual modification
//==========================================================================================================================


//[UHDL]Key Start [md5:7aeadce74abd0189ca778b4c21d0b1f0]
//Version Control Hash: 3accddf64b1dd03abeb9b0b3e5a7ba44
//Content Hash: bdbaeb688a581444015ab61b83b12f9f
//Parameter Hash: d41d8cd98f00b204e9800998ecf8427e
//[UHDL]Key End [md5:7aeadce74abd0189ca778b4c21d0b1f0]

//[UHDL]Version Control Start [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]
//[UHDL]Version Control Version:1.0.1
//[UHDL]Version Control End [md5:3accddf64b1dd03abeb9b0b3e5a7ba44]

//[UHDL]Tool Message Start [md5:62995f167da826eb3126211d8005b9b4]
//Written by UHDL in 2023-07-06 14:24:25
//[UHDL]Tool Message End [md5:62995f167da826eb3126211d8005b9b4]

//[UHDL]User Message Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]User Message End [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Content Start [md5:bdbaeb688a581444015ab61b83b12f9f]
module RegSpaceRTL_cfg_reg_bank_D (
	input             clk             ,
	input             rst_n           ,
	input      [31:0] rreq_addr       ,
	input             rreq_vld        ,
	output            rreq_rdy        ,
	output reg [31:0] rack_data       ,
	output reg        rack_vld        ,
	input             rack_rdy        ,
	input             reg0_field1_wdat,
	input             reg0_field1_wvld,
	output            reg0_field1_wrdy,
	output            reg0_field1_rdat,
	output            reg0_field1_rvld,
	input             reg0_field1_rrdy,
	input      [1:0]  reg0_field2_wdat,
	input             reg0_field2_wvld,
	output            reg0_field2_wrdy,
	output     [1:0]  reg0_field2_rdat,
	output            reg0_field2_rvld,
	input             reg0_field2_rrdy,
	input      [2:0]  reg0_field3_wdat,
	input             reg0_field3_wvld,
	output            reg0_field3_wrdy,
	output     [2:0]  reg0_field3_rdat,
	output            reg0_field3_rvld,
	input             reg0_field3_rrdy,
	input      [3:0]  reg0_field4_wdat,
	input             reg0_field4_wvld,
	output            reg0_field4_wrdy,
	output     [3:0]  reg0_field4_rdat,
	output            reg0_field4_rvld,
	input             reg0_field4_rrdy,
	input             reg1_field1_wdat,
	input             reg1_field1_wvld,
	output            reg1_field1_wrdy,
	output            reg1_field1_rdat,
	output            reg1_field1_rvld,
	input             reg1_field1_rrdy,
	input      [1:0]  reg1_field2_wdat,
	input             reg1_field2_wvld,
	output            reg1_field2_wrdy,
	output     [1:0]  reg1_field2_rdat,
	output            reg1_field2_rvld,
	input             reg1_field2_rrdy,
	input      [2:0]  reg1_field3_wdat,
	input             reg1_field3_wvld,
	output            reg1_field3_wrdy,
	output     [2:0]  reg1_field3_rdat,
	output            reg1_field3_rvld,
	input             reg1_field3_rrdy,
	input      [3:0]  reg1_field4_wdat,
	input             reg1_field4_wvld,
	output            reg1_field4_wrdy,
	output     [3:0]  reg1_field4_rdat,
	output            reg1_field4_rvld,
	input             reg1_field4_rrdy);
	wire [31:0] reg0_rdat  ;
	wire [0:0]  reg0_rvld  ;
	wire [0:0]  reg0_rrdy  ;
	reg  [0:0]  reg0_field1;
	reg  [1:0]  reg0_field2;
	reg  [2:0]  reg0_field3;
	reg  [3:0]  reg0_field4;
	wire [31:0] reg1_rdat  ;
	wire [0:0]  reg1_rvld  ;
	wire [0:0]  reg1_rrdy  ;
	reg  [0:0]  reg1_field1;
	reg  [1:0]  reg1_field2;
	reg  [2:0]  reg1_field3;
	reg  [3:0]  reg1_field4;
	assign rreq_rdy = (rack_rdy && rack_vld);
	
	always @(*) begin
	    if((rreq_addr == 32'b0)) rack_data = reg0_rdat;
	    else if((rreq_addr == 32'b100000)) rack_data = reg1_rdat;
	    else rack_data = 32'b0;
	end
	
	always @(*) begin
	    if((rreq_addr == 32'b0)) rack_vld = reg0_rvld;
	    else if((rreq_addr == 32'b100000)) rack_vld = reg1_rvld;
	    else rack_vld = 1'b0;
	end
	
	assign reg0_rdat = {2'b0, reg0_field1, reg0_field2, reg0_field3, 1'b0, reg0_field4, 19'b0};
	
	assign reg0_rvld = 1'b1;
	
	assign reg0_rrdy = (rreq_vld && (rreq_addr == 32'b0));
	
	assign reg0_field1_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg0_field1 <= 1'b0;
	    else begin
	        if(reg0_field1_wvld) reg0_field1 <= reg0_field1_wdat;
	    end
	end
	
	assign reg0_field1_rdat = reg0_field1;
	
	assign reg0_field1_rvld = 1'b1;
	
	assign reg0_field2_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg0_field2 <= 2'b0;
	    else begin
	        if(reg0_field2_wvld) reg0_field2 <= reg0_field2_wdat;
	    end
	end
	
	assign reg0_field2_rdat = reg0_field2;
	
	assign reg0_field2_rvld = 1'b1;
	
	assign reg0_field3_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg0_field3 <= 3'b0;
	    else begin
	        if(reg0_field3_wvld) reg0_field3 <= reg0_field3_wdat;
	    end
	end
	
	assign reg0_field3_rdat = reg0_field3;
	
	assign reg0_field3_rvld = 1'b1;
	
	assign reg0_field4_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg0_field4 <= 4'b0;
	    else begin
	        if(reg0_field4_wvld) reg0_field4 <= reg0_field4_wdat;
	    end
	end
	
	assign reg0_field4_rdat = reg0_field4;
	
	assign reg0_field4_rvld = 1'b1;
	
	assign reg1_rdat = {2'b0, reg1_field1, reg1_field2, reg1_field3, 1'b0, reg1_field4, 19'b0};
	
	assign reg1_rvld = 1'b1;
	
	assign reg1_rrdy = (rreq_vld && (rreq_addr == 32'b100000));
	
	assign reg1_field1_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg1_field1 <= 1'b0;
	    else begin
	        if(reg1_field1_wvld) reg1_field1 <= reg1_field1_wdat;
	    end
	end
	
	assign reg1_field1_rdat = reg1_field1;
	
	assign reg1_field1_rvld = 1'b1;
	
	assign reg1_field2_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg1_field2 <= 2'b0;
	    else begin
	        if(reg1_field2_wvld) reg1_field2 <= reg1_field2_wdat;
	    end
	end
	
	assign reg1_field2_rdat = reg1_field2;
	
	assign reg1_field2_rvld = 1'b1;
	
	assign reg1_field3_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg1_field3 <= 3'b0;
	    else begin
	        if(reg1_field3_wvld) reg1_field3 <= reg1_field3_wdat;
	    end
	end
	
	assign reg1_field3_rdat = reg1_field3;
	
	assign reg1_field3_rvld = 1'b1;
	
	assign reg1_field4_wrdy = 1'b1;
	
	always @(posedge clk or negedge rst_n) begin
	    if(~rst_n) reg1_field4 <= 4'b0;
	    else begin
	        if(reg1_field4_wvld) reg1_field4 <= reg1_field4_wdat;
	    end
	end
	
	assign reg1_field4_rdat = reg1_field4;
	
	assign reg1_field4_rvld = 1'b1;
	

endmodule
//[UHDL]Content End [md5:bdbaeb688a581444015ab61b83b12f9f]

//[UHDL]Parameter Start [md5:d41d8cd98f00b204e9800998ecf8427e]

//[UHDL]Parameter End [md5:d41d8cd98f00b204e9800998ecf8427e]

